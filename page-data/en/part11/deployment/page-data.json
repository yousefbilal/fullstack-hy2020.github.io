{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part11/deployment","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Having written a nice application it's time to think about how we're going to deploy it to the use of real users. </p>\n<p>In <a href=\"/en/part3/deploying_app_to_internet\">part 3</a> of this course, we did this by simply running a single command from terminal to get the code up and running the servers of the cloud provider <a href=\"https://fly.io/\">Fly.io</a> or <a href=\"https://render.com/\">Render</a>.</p>\n<p>It is pretty simple to release software in Fly.io and Render at least compared to many other types of hosting setups but it still contains risks: nothing prevents us from accidentally releasing broken code to production.</p>\n<p>Next, we're going to look at the principles of making a deployment safely and some of the principles of deploying software on both a small and large scale. </p>\n<h3>Anything that can go wrong...</h3>\n<p>We'd like to define some rules about how our deployment process should work but before that, we have to look at some constraints of reality.</p>\n<p>One on the phrasing of Murphy's Law holds that:\n\"Anything that can go wrong will go wrong.\"</p>\n<p>It's important to remember this when we plan out our deployment system. Some of the things we'll need to consider could include:</p>\n<ul>\n<li>What if my computer crashes or hangs during deployment?</li>\n<li>I'm connected to the server and deploying over the internet, what happens if my internet connection dies?</li>\n<li>What happens if any specific instruction in my deployment script/system fails?</li>\n<li>What happens if, for whatever reason, my software doesn't work as expected on the server I'm deploying to? Can I roll back to a previous version?</li>\n<li>What happens if a user does an HTTP request to our software just before we do deployment (we didn't have time to send a response to the user)?</li>\n</ul>\n<p>These are just a small selection of what can go wrong during a deployment, or rather, things that we should plan for. Regardless of what happens, our deployment system should <strong>never</strong> leave our software in a broken state. We should also always know (or be easily able to find out) what state a deployment is in.</p>\n<p>Another important rule to remember when it comes to deployments (and CI in general) is:\n\"Silent failures are <strong>very</strong> bad!\"</p>\n<p>This doesn't mean that failures need to be shown to the users of the software, it means we need to be aware if anything goes wrong. If we are aware of a problem, we can fix it. If the deployment system doesn't give any errors but fails, we may end up in a state where we believe we have fixed a critical bug but the deployment failed, leaving the bug in our production environment and us unaware of the situation.</p>\n<h3>What does a good deployment system do?</h3>\n<p>Defining definitive rules or requirements for a deployment system is difficult, let's try anyway:</p>\n<ul>\n<li>Our deployment system should be able to fail gracefully at <strong>any</strong> step of the deployment.</li>\n<li>Our deployment system should <strong>never</strong> leave our software in a broken state.</li>\n<li>Our deployment system should let us know when a failure has happened. It's more important to notify about failure than about success.</li>\n<li>\n<p>Our deployment system should allow us to roll back to a previous deployment</p>\n<ul>\n<li>Preferably this rollback should be easier to do and less prone to failure than a full deployment</li>\n<li>Of course, the best option would be an automatic rollback in case of deployment failures</li>\n</ul>\n</li>\n<li>Our deployment system should handle the situation where a user makes an HTTP request just before/during a deployment.</li>\n<li>Our deployment system should make sure that the software we are deploying meets the requirements we have set for this (e.g. don't deploy if tests haven't been run).</li>\n</ul>\n<p>Let's define some things we <strong>want</strong> in this hypothetical deployment system too:</p>\n<ul>\n<li>We would like it to be fast</li>\n<li>We'd like to have no downtime during the deployment (this is distinct from the requirement we have for handling user requests just before/during the deployment).</li>\n</ul>\n<p>Next we will have three sets of exercises for automazing the deployment with GitHub Actions, one for <a href=\"https://fly.io/\">Fly.io</a>, another one for <a href=\"https://render.com/\">Render</a> and finally the good old <a href=\"https://heroku.com\">Heroku</a>. The process of deployment is always specific to the particular cloud provider, so you can also do both the exercise sets if you want to see the differences how these services work with respect to deployments.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 11.10-11.12. (Fly.io)</h3>\n<p>Before going to the below exercises, you should setup your application in <a href=\"https://fly.io/\">Fly.io</a> hosting service like the one we did in <a href=\"/en/part3/deploying_app_to_internet#application-to-the-internet\">part 3</a>.</p>\n<p>If you rather want to use other hosting options, there is an alternative set of exercises for <a href=\"/en/part11/deployment#exercises-11-10-11-12-render\">Render</a> and for <a href=\"/en/part11/deployment#exercises-11-10-11-12-heroku\">Heroku</a>.</p>\n<p>In contrast to part 3 now we <i>do not deploy the code</i> to Fly.io ourselves (with the command <i>flyctl deploy</i>), we let the GitHub Actions workflow do that for us!</p>\n<p>Create a new app in Fly.io and after that generate a Fly.io API token with command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">flyctl auth token</code></pre></div>\n<p>You'll need the token soon for your deployment workflow!</p>\n<p>Before setting up the deployment pipeline let us ensure that a manual deployment with the command <i>flyctl deploy</i> works.</p>\n<p>You most likely need to do at least three changes. Firstly, define the Node version to use in the file <i>package.json</i> to match one used in your machine. For me it is 16.19.1:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token property\">\"engines\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"16.19.1\"</span> </span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fullstackopen-cicd\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Full Stack Open\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The configuration file <i>fly.toml</i> should also be modified to include the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token punctuation\">[</span>deploy<span class=\"token punctuation\">]</span>\n  release_command = \"npm run build\"\n\n<span class=\"token punctuation\">[</span>processes<span class=\"token punctuation\">]</span>\n  app = \"node app.js\"\n\n<span class=\"token punctuation\">[</span>build<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">[</span>build.args<span class=\"token punctuation\">]</span>\n    NODE_VERSION = \"16.19.1\"</code></pre></div>\n<p>Besides these, we should also move <em>webpack</em> from <em>devDependencies</em> to <em>dependencies</em> since our build step requires it to be installed:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"webpack\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.43.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <i>release_command</i> under <a href=\"https://fly.io/docs/reference/configuration/\">deploy</a> now ensures that the production built will be done before starting up the app. In <a href=\"https://fly.io/docs/reference/configuration/#the-processes-section\">processes</a> we define the command that starts the application. Without these changes Fly.io just starts the React dev server and that causes it to shut down since the app itself does not start up.</p>\n<p>Here the <i>app</i> refers to the application process that is started up in the <a href=\"https://fly.io/docs/reference/configuration/#the-services-sections\">services</a> section:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>services<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  http_checks = <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  internal_port = 8080\n<span class=\"gatsby-highlight-code-line\">  processes = <span class=\"token punctuation\">[</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">]</span></span></code></pre></div>\n<h4>11.10 Deploying your application to Fly.io</h4>\n<p>Before starting this exercise, make sure that the manual deployment with the command <i>flyctl deploy</i> works!</p>\n<p>Extend the workflow with a step to deploy your application to Fly.io by following the advice given <a href=\"https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/\">here</a>.</p>\n<p>You need the authorization token that you just created for the deployment. The proper way to pass it's value to GitHub Actions is to use repository secrets:</p>\n<picture><img src=\"/static/262b16a3d79127a992d5ae1569da56e2/5a190/10f.png\" alt=\"repo secret\" srcset=\"/static/262b16a3d79127a992d5ae1569da56e2/772e8/10f.png 200w,\n/static/262b16a3d79127a992d5ae1569da56e2/e17e5/10f.png 400w,\n/static/262b16a3d79127a992d5ae1569da56e2/5a190/10f.png 800w,\n/static/262b16a3d79127a992d5ae1569da56e2/c1b63/10f.png 1200w,\n/static/262b16a3d79127a992d5ae1569da56e2/29007/10f.png 1600w,\n/static/262b16a3d79127a992d5ae1569da56e2/f0293/10f.png 2250w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Now the workflow can access the token value as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">${{secrets.FLY_API_TOKEN}}</code></pre></div>\n<p>If all goes well, your workflow log should look a bit like this:</p>\n<picture><img src=\"/static/3a19e2caf0af88cc10d796396bc8f0d2/5a190/11.png\" srcset=\"/static/3a19e2caf0af88cc10d796396bc8f0d2/772e8/11.png 200w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/e17e5/11.png 400w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/5a190/11.png 800w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/c1b63/11.png 1200w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/29007/11.png 1600w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/5496c/11.png 2452w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>Remember</strong> that it is always essential to keep an eye on what is happening in server logs when playing around with product deployments, so use <code>flyctl logs</code> early and use it often. No, use it all the time!</p>\n<h4>11.11 Health check and rollback</h4>\n<p>Each deployment in Fly.io creates a <a href=\"https://fly.io/docs/flyctl/releases/\">release</a>. Releases can be checked from the command line:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ flyctl releases\nVERSION\tSTABLE\tTYPE    \tSTATUS   \tDESCRIPTION            \t<span class=\"token environment constant\">USER</span>           \tDATE\nv13    \t<span class=\"token boolean\">true</span>  \trelease \tsucceeded\tDeploy image           \tmluukkai@iki.fi\t30m6s ago\nv12    \t<span class=\"token boolean\">true</span>  \trelease \tsucceeded\tDeploy image           \tmluukkai@iki.fi\t51m30s ago\nv11    \t<span class=\"token boolean\">true</span>  \trelease \tsucceeded\tDeploy image           \tmluukkai@iki.fi\t59m25s ago\nv10    \t<span class=\"token boolean\">true</span>  \trelease \tsucceeded\tDeploy image           \tmluukkai@iki.fi\t1h6m ago</code></pre></div>\n<p>It is essential to ensure that a deployment ends up to a <i>succeeding</i> release, where the app is in healthy functional state. Fortunately Fly.io has several configuration options that take care of the application health check.</p>\n<p>The default fly.toml has already a section <a href=\"https://fly.io/docs/reference/configuration/#services-tcp_checks\">\nservices.tcp_checks</a> </p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>services.tcp_checks<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    grace_period = \"1s\"\n    interval = \"15s\"\n    restart_limit = 0\n    timeout = \"2s\"</code></pre></div>\n<p>This section defines a basic health check of the deployment. The TCP check ensures that the virtual machine where the app resides is up and running and reachable from outside, by opening a <a href=\"https://en.wikipedia.org/wiki/Transmission_Control_Protocol\">TCP</a> connection to the virtual machine. </p>\n<p>This check notices if something is fundamentally broken in the configurations. E.g. in my case for the app of this part, it took several trials until I got the app up and running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ fly releases\nVERSION\tSTABLE\tTYPE    \tSTATUS   \tDESCRIPTION            \t<span class=\"token environment constant\">USER</span>           \tDATE\nv4     \t<span class=\"token boolean\">true</span>  \trelease \tsucceeded\tDeploy image           \tmluukkai@iki.fi\t5h39m ago\nv3     \t<span class=\"token boolean\">false</span> \trelease \tfailed   \tDeploy image           \tmluukkai@iki.fi\t5h50m ago\nv2     \t<span class=\"token boolean\">false</span> \trelease \tfailed   \tDeploy image           \tmluukkai@iki.fi\t5h57m ago\nv1     \t<span class=\"token boolean\">false</span> \trelease \tfailed   \tDeploy image           \tmluukkai@iki.fi\t6h12m ago\nv0     \t<span class=\"token boolean\">false</span> \trelease \tfailed   \tDeploy image           \tmluukkai@iki.fi\t6h19m ago</code></pre></div>\n<p>So finally in the 5th deployment (version v4) I got the configuration right and that ended in a succeeding release.</p>\n<p>Besides the rudimentary TCP health check, it is extremely beneficial to have also some \"application level\" health checks ensuring that the app for real is in functional state. One possibility for this is a HTTP-level check defined in section <a href=\"https://fly.io/docs/reference/configuration/#services-tcp_checks\">services.http_checks</a> that can be used to ensure that the app is responding to the HTTP requests.</p>\n<p>Add a simple endpoint for doing an application health check to the backend. You may e.g. copy this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/health'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Configure then a <a href=\"https://fly.io/docs/reference/configuration/#services-http_checks\">HTTP-check</a> that ensures the health of the deployments based on the HTTP request to the defined health check endpoint.</p>\n<p>Note that the default fly.toml has defined that <i>http_checks</i> is an empty array. You need to remove this line when you are adding a manually defined HTTP-check:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>services<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"gatsby-highlight-code-line\">  http_checks = <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span></code></pre></div>\n<p>It might also be a good idea to have a dummy endpoint in the app that makes it possible to do some code changes and to ensure that the deployed version has really changed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/version'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// change this string to ensure a new version deployed</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ensure that Actions notices if a deployment breaks your application:</p>\n<picture><img src=\"/static/11c29b35517cc43b93baa54b79ff08d6/5a190/12f.png\" srcset=\"/static/11c29b35517cc43b93baa54b79ff08d6/772e8/12f.png 200w,\n/static/11c29b35517cc43b93baa54b79ff08d6/e17e5/12f.png 400w,\n/static/11c29b35517cc43b93baa54b79ff08d6/5a190/12f.png 800w,\n/static/11c29b35517cc43b93baa54b79ff08d6/c1b63/12f.png 1200w,\n/static/11c29b35517cc43b93baa54b79ff08d6/29007/12f.png 1600w,\n/static/11c29b35517cc43b93baa54b79ff08d6/75d3b/12f.png 1966w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You may simulate this e.g. as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/health'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token string\">'error...'</span>\n  <span class=\"token comment\">// eslint-disable-next-line no-unreachable</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As can be seen in the command line, when a deployment fails, Fly.io rolls back to the previous working release:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ fly releases\nVERSION\tSTABLE\tTYPE    \tSTATUS   \tDESCRIPTION            \t<span class=\"token environment constant\">USER</span>           \tDATE\nv15    \t<span class=\"token boolean\">true</span>  \trollback\tsucceeded\tReverting to version <span class=\"token number\">13</span>\t               \t16m48s ago\nv14    \t<span class=\"token boolean\">false</span> \trelease \tfailed   \tDeploy image           \tmluukkai@iki.fi\t21m53s ago\nv13    \t<span class=\"token boolean\">true</span>  \trelease \tsucceeded\tDeploy image           \tmluukkai@iki.fi\t30m6s ago\nv12    \t<span class=\"token boolean\">true</span>  \trelease \tsucceeded\tDeploy image           \tmluukkai@iki.fi\t51m30s ago\nv11    \t<span class=\"token boolean\">true</span>  \trelease \tsucceeded\tDeploy image           \tmluukkai@iki.fi\t59m25s ago\nv10    \t<span class=\"token boolean\">true</span>  \trelease \tsucceeded\tDeploy image           \tmluukkai@iki.fi\t1h6m ago</code></pre></div>\n<p>So despite the problems in the release, the app stays functional!</p>\n<p>Before moving to next exercise, fix your deployment and ensure that the application works again as intended.</p>\n<h4>11.12. Custom health check</h4>\n<p><strong>NOTE:</strong> at the moment the custom health check feature in Fly.io does not work. You can mark this exercise done without doing anything. A replacement for this exercise will be developed later...</p>\n<p>Besides TCP and HTTP based health checks, Fly.io allows to use very flexible shell script based health checks. The feature is still undocumented but e.g. <a href=\"https://community.fly.io/t/verifying-services-script-checks-is-supported/1464\">this</a> shows you how to use it.</p>\n<p>Create a file <i>health_check.sh</i> with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello from shell script\"</span>\n\n<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span> <span class=\"token comment\"># exit status 1 means that the script \"fails\"</span></code></pre></div>\n<p>Give it execution permissions (Google or see e.g. <a href=\"https://www.guru99.com/file-permissions.html\">this</a> to find out how) and ensure that you can run it from the command line:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./health_check.sh\nHello from shell script</code></pre></div>\n<p>Define a health check to your app that runs the script in the file <i>health_check.sh</i>. Ensure that this health check and deployment fails. After that, change the script as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello from shell script\"</span>\n\n<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># exit status 0 means that the script \"succeeds\"</span></code></pre></div>\n<p>Ensure now that the deployment works. Note that to get the path to the script file right, it may be beneficial to log in to your virtual machine console to see where the files reside. Logging in is done with the command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">flyctl <span class=\"token function\">ssh</span> console <span class=\"token parameter variable\">-t</span> YOUR_AUTH_TOKEN</code></pre></div>\n<p>Now when you know that the script based health check works, it is time to define the real health check.</p>\n<p><i>Write a script ensuring the health check endpoint (that is, the GET request to '/health') not only works, but also returns the correct string 'ok'.</i></p>\n<p>You probably should use <a href=\"https://curl.se/\">curl</a> in the script to do the HTTP request. You most likely need to Google how to get hold to the returned string and compare it with the expected value 'ok'.</p>\n<p>By default <em>curl</em> does not exist in the Fly.io virtual machine. You can install it by adding the following line in the file <em>Dockerfile</em> that gets created in your project root directory when Fly.io app is set up:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># ...</span>\n\nFROM debian:bullseye\n\n<span class=\"gatsby-highlight-code-line\">RUN <span class=\"token function\">apt-get</span> update<span class=\"token punctuation\">;</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">curl</span></span>\nLABEL <span class=\"token assign-left variable\">fly_launch_runtime</span><span class=\"token operator\">=</span><span class=\"token string\">\"nodejs\"</span>\n\nCOPY <span class=\"token parameter variable\">--from</span><span class=\"token operator\">=</span>builder /root/.volta /root/.volta\nCOPY <span class=\"token parameter variable\">--from</span><span class=\"token operator\">=</span>builder /app /app\n\nWORKDIR /app\nENV NODE_ENV production\nENV <span class=\"token environment constant\">PATH</span> /root/.volta/bin:<span class=\"token environment constant\">$PATH</span>\n\nCMD <span class=\"token punctuation\">[</span> <span class=\"token string\">\"npm\"</span>, <span class=\"token string\">\"run\"</span>, <span class=\"token string\">\"start\"</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>It is <strong>strongly advisable</strong> to check first locally that the script works since so many things can go wrong in it, and when run in GitHub Action, you can not do any debug printing. If and <i> when</i> things do not work as intended, it is also a very good idea to log in to the virtual machine (with <i>flyctl ssh console</i>) and check that the script works when ran manually there.</p>\n<p><em>Note</em> that in order to test the script in the virtual machine, you should have the script in your local directory when you make a successful deployment. So if your deployment fails, the script will not be uploaded to the Fly.io server. So in case of problems, comment out the script based health check from fly.toml and do a deployment to get your script to the virtual machine.</p>\n<p>Our script based health check is hardly meaningful in real life since it does essentially the same that is achievable with the simple HTTP check. The example here is just to show that the mechanism exists. Unlike with HTTP checks, with script based health checks you can in principle write an arbitrarily compiled and many sided health check to your app, should you need one.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 11.10-11.12. (Render)</h3>\n<p>If you rather want to use other hosting options, there is an alternative set of exercises for <a href=\"/en/part11/deployment/#exercises-11-10-11-12-fly-io\">Fly.io</a> and for <a href=\"/en/part11/deployment#exercises-11-10-11-12-heroku\">Heroku</a>.</p>\n<h4>11.10 Deploying your application to Render</h4>\n<p>Set up your application in <a href=\"https://render.com/\">Render</a>. The setup is now not quite as straightforward as in <a href=\"/en/part3/deploying_app_to_internet#application-to-the-internet\">part 3</a>. You have to carefully think about what should go to these settings:</p>\n<picture><img src=\"/static/8cfe69610a14255c0d99daeaaaed9cdb/5a190/render1.png\" srcset=\"/static/8cfe69610a14255c0d99daeaaaed9cdb/772e8/render1.png 200w,\n/static/8cfe69610a14255c0d99daeaaaed9cdb/e17e5/render1.png 400w,\n/static/8cfe69610a14255c0d99daeaaaed9cdb/5a190/render1.png 800w,\n/static/8cfe69610a14255c0d99daeaaaed9cdb/c1b63/render1.png 1200w,\n/static/8cfe69610a14255c0d99daeaaaed9cdb/29007/render1.png 1600w,\n/static/8cfe69610a14255c0d99daeaaaed9cdb/5ab15/render1.png 2446w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If you need to run several commands in the build or start command, you may use a simple shell script for that.</p>\n<p>Create eg. a file <i>build_step.sh</i> with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Build script\"</span>\n\n<span class=\"token comment\"># add the commands here</span></code></pre></div>\n<p>Give it execution permissions (Google or see e.g. <a href=\"https://www.guru99.com/file-permissions.html\">this</a> to find out how) and ensure that you can run it from the command line:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./build_step.sh\nBuild script</code></pre></div>\n<p>You also need to open the <i>Advanced settings</i> and turn the auto-deploy off since we want to control the deployment in the GitHub Actions:</p>\n<picture><img src=\"/static/426739435ce30b5d2f24e6211912a7e8/5a190/render2.png\" srcset=\"/static/426739435ce30b5d2f24e6211912a7e8/772e8/render2.png 200w,\n/static/426739435ce30b5d2f24e6211912a7e8/e17e5/render2.png 400w,\n/static/426739435ce30b5d2f24e6211912a7e8/5a190/render2.png 800w,\n/static/426739435ce30b5d2f24e6211912a7e8/c1b63/render2.png 1200w,\n/static/426739435ce30b5d2f24e6211912a7e8/29007/render2.png 1600w,\n/static/426739435ce30b5d2f24e6211912a7e8/63908/render2.png 2410w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Ensure now that you get the app up and running. Use the <i>Manual deploy</i>.</p>\n<p>Most likely things will fail at the start, so remember to keep the <i>Logs</i> open all the time.</p>\n<h4>11.11 Automatic deployments</h4>\n<p>Go now to GitHub Actions <a href=\"https://github.com/marketplace\">marketplace</a> and search for action for our purposes. You might search with <i>render deploy</i>. There are several actions to choose from. You can pick any. Quite often the best choice is the one with the most stars. It is also a good idea to look if the action is actively maintained (time of the last release) and does it have many open issues or pull requests.</p>\n<p>Set up the action to your workflow and ensure that every commit that pass all the checks results in a new deployment. Note that you need Render API key and the app service id for the deployment. See <a href=\"https://render.com/docs/api\">here</a> how the API key is generated. You can get the service id from the URL of the Render dashboard of your app. The end of the URL (starting with <em>srv-</em>) is the id:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">https://dashboard.render.com/web/srv-crandomcharachtershere</code></pre></div>\n<p>Alternatively you could just use <a href=\"https://render.com/docs/deploy-hooks\">Render Deploy Hook</a> which is a private url to trigger the deployment. You can get it from your app settings <img src=\"https://user-images.githubusercontent.com/47830671/230722899-1ebb414e-ae1e-4a5e-a7b8-f376c4f1ca4d.png\" alt=\"fsorender1\">.\nDON'T USE the plain url in your pipeline. Instead create github secrets for your key and service id: <img src=\"https://user-images.githubusercontent.com/47830671/230723138-77d027be-3162-4697-987e-b654bc710187.png\" alt=\"fsorender2\">\nThen you can use them like this: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    main:\n    name: Deploy to Render\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger deployment\n        run: <span class=\"token function\">curl</span> https://api.render.com/deploy/srv-<span class=\"token variable\">${{ secrets.RENDER_SERVICE_ID }</span><span class=\"token punctuation\">}</span>?key<span class=\"token operator\">=</span><span class=\"token variable\">${{ secrets.RENDER_API_KEY }</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The deployment takes some time. See the events tab of the Render dashboard to see when the new deployment is ready:</p>\n<picture><img src=\"/static/b65d12907d88b6423df27d336c50c5bd/5a190/render3.png\" srcset=\"/static/b65d12907d88b6423df27d336c50c5bd/772e8/render3.png 200w,\n/static/b65d12907d88b6423df27d336c50c5bd/e17e5/render3.png 400w,\n/static/b65d12907d88b6423df27d336c50c5bd/5a190/render3.png 800w,\n/static/b65d12907d88b6423df27d336c50c5bd/c1b63/render3.png 1200w,\n/static/b65d12907d88b6423df27d336c50c5bd/29007/render3.png 1600w,\n/static/b65d12907d88b6423df27d336c50c5bd/cbe7f/render3.png 2420w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It might be a good idea to have a dummy endpoint in the app that makes it possible to do some code changes and to ensure that the deployed version has really changed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/version'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// change this string to ensure a new version deployed</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>11.12 Health check</h4>\n<p>All tests pass and the new version of the app gets automatically deployed to Render so everything seems to be in order. But does the app really work? Besides the checks done in the deployment pipeline, it is extremely beneficial to have also some \"application level\" health checks ensuring that the app for real is in a functional state.</p>\n<p>Add a simple endpoint for doing an application health check to the backend. You may e.g. copy this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/health'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Commit the code and push it to GitHub. Ensure that you can access the health check endpoint of your app.</p>\n<p>Configure now a <i>Health Check Path</i> to your app. The configuration is done in the settings tab of the Render dashboard.</p>\n<p>Make a change in your code, push it to GitHub, and ensure that the deployment succeeds.</p>\n<p>Note that you can see the log of deployment by clicking the most recent deployment in the events tab.</p>\n<p>When you are set up with the health check, simulate a broken deployment by changing the code as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/health'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token string\">'error...'</span>\n  <span class=\"token comment\">// eslint-disable-next-line no-unreachable</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Push the code to GitHub and ensure that a broken version does not get deployed and the previous version of the app keeps running.</p>\n<p>Before moving on, fix your deployment and ensure that the application works again as intended.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 11.10-11.12. (Heroku)</h3>\n<p>Before going to the below exercises, you should setup your application in <a href=\"heroku.com\">Heroku</a> hosting service like the one we did in <a href=\"/en/part3/deploying_app_to_internet#application-to-the-internet\">part 3</a>.</p>\n<p>If you rather want to use other hosting options, there is an alternative set of exercises for <a href=\"/en/part11/deployment/#exercises-11-10-11-12-fly-io\">Fly.io</a> and for <a href=\"/en/part11/deployment#exercises-11-10-11-12-render\">Render</a>.</p>\n<p>In contrast to part 3 now we <i>do not push the code</i> to Heroku ourselves, we let the Github Actions workflow do that for us!</p>\n<p>Ensure now that you have <a href=\"https://devcenter.heroku.com/articles/heroku-cli#download-and-install\">Heroku CLI</a> installed and login to Heroku using the CLI with <code>heroku login</code>.</p>\n<p>Create a new app in Heroku using the  CLI: <code>heroku create --region eu {your-app-name}</code>, pick a <a href=\"https://devcenter.heroku.com/articles/regions\">region</a> close to your own location! (You can also leave the app blank and Heroku will create an app name for you.)</p>\n<p>Generate an API token for your Heroku profile using command <code>heroku authorizations:create</code>, and save the credentials to a local file but <i><strong>do not push those to GitHub</strong></i>!</p>\n<p>You'll need the token soon for your deployment workflow. See more information at about Heroku tokens <a href=\"https://devcenter.heroku.com/articles/platform-api-quickstart\">here</a>.</p>\n<h4>11.10 Deploying your application to Heroku</h4>\n<p>Extend the workflow with a step to deploy your application to Heroku.</p>\n<p>The below assumes that you use the ready-made Heroku deploy action <a href=\"https://github.com/AkhileshNS/heroku-deploy\">AkhileshNS/heroku-deploy</a> that has been developed by the community.</p>\n<p>You need the authorization token that you just created for the deployment. The proper way to pass it's value to GitHub Actions is to use repository secrets:</p>\n<picture><img src=\"/static/ee920b99f261fd140b0d219800c72bed/5a190/10x.png\" alt=\"repo secret\" srcset=\"/static/ee920b99f261fd140b0d219800c72bed/772e8/10x.png 200w,\n/static/ee920b99f261fd140b0d219800c72bed/e17e5/10x.png 400w,\n/static/ee920b99f261fd140b0d219800c72bed/5a190/10x.png 800w,\n/static/ee920b99f261fd140b0d219800c72bed/c1b63/10x.png 1200w,\n/static/ee920b99f261fd140b0d219800c72bed/29007/10x.png 1600w,\n/static/ee920b99f261fd140b0d219800c72bed/eff3b/10x.png 2072w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Now the workflow can access the token value as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">${{secrets.HEROKU_API_KEY}}</code></pre></div>\n<p>If all goes well, your workflow log should look a bit like this:</p>\n<picture><img src=\"/static/3a19e2caf0af88cc10d796396bc8f0d2/5a190/11.png\" srcset=\"/static/3a19e2caf0af88cc10d796396bc8f0d2/772e8/11.png 200w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/e17e5/11.png 400w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/5a190/11.png 800w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/c1b63/11.png 1200w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/29007/11.png 1600w,\n/static/3a19e2caf0af88cc10d796396bc8f0d2/5496c/11.png 2452w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can then try the app with a browser, but most likely you run into a problem. If we read carefully <a href=\"/en/part3/deploying_app_to_internet#application-to-the-internet\">the section 'Application to the Internet' in part 3</a> we notice that Heroku assumes that the repository has a file called <i>Procfile</i> that tells Heroku how to start the application. </p>\n<p>So, add a proper Procfile and ensure that the application starts properly. </p>\n<p><strong>Remember</strong> that it is always essential to keep an eye on what is happening in server logs when playing around with product deployments, so use <code>heroku logs</code> early and use it often. No, use it all the time!</p>\n<h4>11.11 Health check</h4>\n<p>Before moving on let us expand the workflow with one more step, a check that ensures that the application is up and running after the deployment. </p>\n<p>Actually a separate workflow step is not needed, since the action\n<a href=\"https://github.com/marketplace/actions/deploy-to-heroku\">deploy-to-heroku</a> contains an option that takes care of it.</p>\n<p>Add a simple endpoint for doing an application health check to the backend. You may e.g. copy this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/health'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It might also be a good idea to have a dummy endpoint in the app that makes it possible to do some code changes and to ensure that the deployed version has really changed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/version'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// change this string to ensure a new version deployed</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Look now from the <a href=\"https://github.com/marketplace/actions/deploy-to-heroku\">documentation</a> how to include the health check in the deployment step. Use the created endpoint for the health check url. You most likely need also the <i>checkstring</i> option to get the check working.</p>\n<p>Ensure that Actions notices if a deployment breaks your application. You may simulate this e.g. by writing a wrong startup command to Procfile:</p>\n<picture><img src=\"/static/00fa90af066fb81e6265d9d5015c8c45/5a190/12x.png\" srcset=\"/static/00fa90af066fb81e6265d9d5015c8c45/772e8/12x.png 200w,\n/static/00fa90af066fb81e6265d9d5015c8c45/e17e5/12x.png 400w,\n/static/00fa90af066fb81e6265d9d5015c8c45/5a190/12x.png 800w,\n/static/00fa90af066fb81e6265d9d5015c8c45/c1b63/12x.png 1200w,\n/static/00fa90af066fb81e6265d9d5015c8c45/29007/12x.png 1600w,\n/static/00fa90af066fb81e6265d9d5015c8c45/a5120/12x.png 2380w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Before moving to next exercise, fix your deployment and ensure that the application works again as intended.</p>\n<h4>11.12. Rollback</h4>\n<p>If the deployment results in a broken application, the best thing to do is to <i>roll back</i> to the previous release. Luckily Heroku makes this pretty easy. Every deployment to Heroku results in a <a href=\"https://blog.heroku.com/releases-and-rollbacks#releases\">release</a>. You can see your application's releases with the command <code>heroku releases</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ heroku releases\n<span class=\"token operator\">===</span> calm<span class=\"token operator\">-</span>wildwood<span class=\"token operator\">-</span><span class=\"token number\">40210</span> Releases <span class=\"token operator\">-</span> Current<span class=\"token operator\">:</span> v8\nv8  Deploy de15fc2b  mluukkai@iki<span class=\"token punctuation\">.</span>fi  <span class=\"token number\">2022</span><span class=\"token operator\">/</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">02</span> <span class=\"token number\">19</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">22</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> 8m ago<span class=\"token punctuation\">)</span>\nv7  Deploy 8748a04e  mluukkai@iki<span class=\"token punctuation\">.</span>fi  <span class=\"token number\">2022</span><span class=\"token operator\">/</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">02</span> <span class=\"token number\">19</span><span class=\"token operator\">:</span><span class=\"token number\">06</span><span class=\"token operator\">:</span><span class=\"token number\">28</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> 16m ago<span class=\"token punctuation\">)</span>\nv6  Deploy a617a93d  mluukkai@iki<span class=\"token punctuation\">.</span>fi  <span class=\"token number\">2022</span><span class=\"token operator\">/</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">02</span> <span class=\"token number\">19</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">02</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> 23m ago<span class=\"token punctuation\">)</span>\nv5  Deploy 70f9b219  mluukkai@iki<span class=\"token punctuation\">.</span>fi  <span class=\"token number\">2022</span><span class=\"token operator\">/</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">02</span> <span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">48</span><span class=\"token operator\">:</span><span class=\"token number\">47</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> 34m ago<span class=\"token punctuation\">)</span>\nv4  Deploy 0b2db00d  mluukkai@iki<span class=\"token punctuation\">.</span>fi  <span class=\"token number\">2022</span><span class=\"token operator\">/</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">02</span> <span class=\"token number\">17</span><span class=\"token operator\">:</span><span class=\"token number\">53</span><span class=\"token operator\">:</span><span class=\"token number\">24</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> 1h ago<span class=\"token punctuation\">)</span>\nv3  Deploy f1cd250b  mluukkai@iki<span class=\"token punctuation\">.</span>fi  <span class=\"token number\">2022</span><span class=\"token operator\">/</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">02</span> <span class=\"token number\">17</span><span class=\"token operator\">:</span><span class=\"token number\">44</span><span class=\"token operator\">:</span><span class=\"token number\">32</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> 1h ago<span class=\"token punctuation\">)</span>\nv2  Enable Logplex   mluukkai@iki<span class=\"token punctuation\">.</span>fi  <span class=\"token number\">2022</span><span class=\"token operator\">/</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">02</span> <span class=\"token number\">17</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">26</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> 2h ago<span class=\"token punctuation\">)</span>\nv1  Initial release  mluukkai@iki<span class=\"token punctuation\">.</span>fi  <span class=\"token number\">2022</span><span class=\"token operator\">/</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">02</span> <span class=\"token number\">17</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">25</span> <span class=\"token operator\">+</span><span class=\"token number\">0200</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> 2h ago<span class=\"token punctuation\">)</span></code></pre></div>\n<p>One can quickly do a <a href=\"https://blog.heroku.com/releases-and-rollbacks#rollbacks\">rollback</a> to a release with just a single command from commandline. </p>\n<p>What is even better, is that the action <a href=\"https://github.com/marketplace/actions/deploy-to-heroku\">deploy-to-heroku</a> can take care of the rollback for us!</p>\n<p>So read again the <a href=\"https://github.com/marketplace/actions/deploy-to-heroku\">documentation</a> and modify the workflow to prevent a broken deployment altogether. You can again simulate a broken deployment with breaking the Procfile:</p>\n<picture><img src=\"/static/640b70f8250cbedd5ffd0ae9451f2483/5a190/13x.png\" srcset=\"/static/640b70f8250cbedd5ffd0ae9451f2483/772e8/13x.png 200w,\n/static/640b70f8250cbedd5ffd0ae9451f2483/e17e5/13x.png 400w,\n/static/640b70f8250cbedd5ffd0ae9451f2483/5a190/13x.png 800w,\n/static/640b70f8250cbedd5ffd0ae9451f2483/c1b63/13x.png 1200w,\n/static/640b70f8250cbedd5ffd0ae9451f2483/29007/13x.png 1600w,\n/static/640b70f8250cbedd5ffd0ae9451f2483/49b61/13x.png 1756w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Ensure that the application stays still operational despite a broken deployment. </p>\n<p>Note that despite the automatic rollback operation, the build fails and when this happens in real life it is <i> essential</i> to find what caused the problem and fix it quickly. As usual, the best place to start finding out the cause of the problem is to study Heroku logs:</p>\n<picture><img src=\"/static/958c8d42082c152bf96219cd7353c43d/5a190/14.png\" srcset=\"/static/958c8d42082c152bf96219cd7353c43d/772e8/14.png 200w,\n/static/958c8d42082c152bf96219cd7353c43d/e17e5/14.png 400w,\n/static/958c8d42082c152bf96219cd7353c43d/5a190/14.png 800w,\n/static/958c8d42082c152bf96219cd7353c43d/c1b63/14.png 1200w,\n/static/958c8d42082c152bf96219cd7353c43d/29007/14.png 1600w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/56e5de2c8009789795a87071b1067167/part-11.svg"},"part":11,"letter":"c","lang":"en"}}},"pageContext":{"part":11,"letter":"c","lang":"en"}},"staticQueryHashes":["3128451518"]}